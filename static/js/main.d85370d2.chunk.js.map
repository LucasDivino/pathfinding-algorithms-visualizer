{"version":3,"sources":["Components/Node/index.js","algorithms/utils.js","algorithms/dijkstra.js","algorithms/mazeGenerator.js","Components/PathfindingVisualizer/index.js","algorithms/breadthFirst.js","algorithms/depthFirst.js","App.js","index.js"],"names":["Node","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","colorClassName","className","id","getShortestPath","finishNode","shortestPath","currentNode","undefined","unshift","previousNode","setNode","grid","node","isVisited","distance","Infinity","getNeighbors","neighbors","push","length","updateUnvisitedNeighbors","unvisitedNeighbors","filter","neighbor","getUnvisitedNeighbors","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","dijkstra","startNode","visitedNodes","nodes","getAllNodes","closestNode","shift","removeWall","getUnvisitedNeighborsInRandomOrder","Math","random","item","START_ROW","START_COL","FINISH_ROW","FINISH_COL","HAS_START","HAS_FINISH","createNode","getGridWithWalls","newNode","newGrid","slice","getGridWithStart","getGridWithFinish","PathfindingVisualizer","state","algorithm","isPressed","show","alertText","this","visualizeDijkstra","visualizeBFS","visualizeDFS","setState","currentRow","floor","screen","width","InitialGrid","i","j","extraClasses","document","getElementById","setTimeout","animateShortestPath","queue","currentConnected","BFS","animate","stack","pop","DFS","isFisish","setWalls","mazeGenerator","Navbar","bg","variant","Brand","icon","faMapMarkerAlt","Button","onClick","handleClickClearBoard","handleClickClearPath","NavDropdown","title","Item","handleChangeAlgorithm","handleClickVisualize","generateMaze","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","Alert","onClose","dismissible","Component","App","ReactDOM","render"],"mappings":"2UAIe,SAASA,EAAKC,GAAQ,IAC3BC,EAA8ED,EAA9EC,IAAKC,EAAyEF,EAAzEE,IAAKC,EAAoEH,EAApEG,SAAUC,EAA0DJ,EAA1DI,QAASC,EAAiDL,EAAjDK,OAAQC,EAAyCN,EAAzCM,YAAaC,EAA4BP,EAA5BO,aAAcC,EAAcR,EAAdQ,UAClEC,EAAiBN,EACnB,cACAC,EACA,aACAC,EACA,YACA,GACJ,OACE,yBACEK,UAAS,eAAUD,GACnBE,GAAE,UAAKT,EAAL,YAAYD,GACdK,YAAa,kBAAMA,EAAYJ,EAAKD,IACpCM,aAAc,kBAAMA,EAAaL,EAAKD,IACtCO,UAAW,kBAAMA,MAEhB,K,oDCrBA,SAASI,EAAgBC,GAG9B,IAFA,IAAMC,EAAe,GACjBC,EAAcF,OACKG,IAAhBD,GACLD,EAAaG,QAAQF,GACrBA,EAAcA,EAAYG,aAE5B,OAAOJ,EAGF,SAASK,EAAQC,GAAO,IAAD,uBAC5B,YAAkBA,EAAlB,+CAAwB,CAAC,IAAdlB,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdmB,EAAa,QACtBA,EAAKC,WAAY,EACjBD,EAAKE,SAAWC,IAChBH,EAAKH,kBAAeF,EACpBK,EAAKC,WAAY,GALG,oFADI,mFAWvB,SAASG,EAAaJ,EAAMD,GACjC,IAAMM,EAAY,GACVzB,EAAaoB,EAAbpB,IAAKC,EAAQmB,EAARnB,IAKb,OAJIA,EAAM,GAAGwB,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IACtCC,EAAMkB,EAAKQ,OAAS,GAAGF,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IACpDA,EAAM,GAAGyB,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IACxCA,EAAMmB,EAAK,GAAGQ,OAAS,GAAGF,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IACtDyB,EChBT,SAASG,EAAyBR,EAAMD,GACtC,IAAMU,EAXR,SAA+BT,EAAMD,GACnC,IAAMM,EAAY,GACVzB,EAAaoB,EAAbpB,IAAKC,EAAQmB,EAARnB,IAKb,OAJIA,EAAM,GAAGwB,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IACtCC,EAAMkB,EAAKQ,OAAS,GAAGF,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IACpDA,EAAM,GAAGyB,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IACxCA,EAAMmB,EAAK,GAAGQ,OAAS,GAAGF,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IACtDyB,EAAUK,QAAO,SAAAC,GAAQ,OAAKA,EAASV,aAInBW,CAAsBZ,EAAMD,GADX,uBAE5C,YAAuBU,EAAvB,+CAA2C,CAAC,IAAjCE,EAAgC,QACzCA,EAAST,SAAWF,EAAKE,SAAW,EACpCS,EAASd,aAAeG,GAJkB,mFAQ9C,SAASa,EAAoBC,GAC3BA,EAAeC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAAWe,EAAMf,YAGxD,SAASgB,EAASnB,EAAMoB,EAAW3B,GACxCM,EAAQC,GACR,IAAMqB,EAAe,GACrBD,EAAUjB,SAAW,EAErB,IADA,IAAMY,EAeR,SAAqBf,GACnB,IAAMsB,EAAQ,GADW,uBAEzB,YAAkBtB,EAAlB,+CAAwB,CAAC,IAAdlB,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdmB,EAAa,QACtBqB,EAAMf,KAAKN,IAFS,oFAFC,kFAOzB,OAAOqB,EAtBgBC,CAAYvB,GAC1Be,EAAeP,QAAQ,CAC9BM,EAAoBC,GACpB,IAAMS,EAAcT,EAAeU,QAEnC,IAAID,EAAYvC,OAAhB,CAEA,GAAIuC,EAAYrB,WAAaC,IAAU,OAAOiB,EAG9C,GAFAG,EAAYtB,WAAY,EACxBmB,EAAad,KAAKiB,GACdA,IAAgB/B,EAAY,OAAO4B,EACvCZ,EAAyBe,EAAaxB,KClB1C,SAAS0B,EAAW1B,EAAMC,EAAMW,GAC1BX,EAAKpB,MAAQ+B,EAAS/B,KAAOoB,EAAKnB,IAAM8B,EAAS9B,MACnDkB,EAAKC,EAAKnB,IAAM,GAAGmB,EAAKpB,KAAKI,QAAS,GAEpCgB,EAAKpB,IAAM+B,EAAS/B,KAAOoB,EAAKnB,MAAQ8B,EAAS9B,MACnDkB,EAAKC,EAAKnB,KAAKmB,EAAKpB,IAAM,GAAGI,QAAS,GAEpCgB,EAAKpB,MAAQ+B,EAAS/B,KAAOoB,EAAKnB,IAAM8B,EAAS9B,MACnDkB,EAAKC,EAAKnB,IAAM,GAAGmB,EAAKpB,KAAKI,QAAS,GAEpCgB,EAAKpB,IAAM+B,EAAS/B,KAAOoB,EAAKnB,KAAO8B,EAAS9B,MAClDkB,EAAKC,EAAKnB,KAAKmB,EAAKpB,IAAM,GAAGI,QAAS,GAyB1C,SAAS0C,EAAmC3B,EAAMC,GAChD,IAAMK,EAAY,GACVzB,EAAaoB,EAAbpB,IAAKC,EAAQmB,EAARnB,IAcb,OAbIA,EAAM,GACRwB,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IAE3BC,EAAMkB,EAAKQ,OAAS,GACtBF,EAAUC,KAAKP,EAAKlB,EAAM,GAAGD,IAE3BA,EAAM,GACRyB,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IAE7BA,EAAMmB,EAAK,GAAGQ,OAAS,GACzBF,EAAUC,KAAKP,EAAKlB,GAAKD,EAAM,IAEjCyB,EAAUU,MAAK,kBAAMY,KAAKC,SAAW,MAC9BvB,EAAUK,QAAO,SAAAmB,GAAI,OAAKA,EAAK5B,a,UCxDpC6B,EAAY,EACZC,EAAY,EACZC,EAAa,GACbC,EAAa,EAEbC,GAAY,EACZC,GAAa,EAEXC,EAAa,SAACxD,EAAKC,GACvB,MAAO,CACLD,MACAC,MACAE,QAAS+C,IAAcjD,GAAOkD,IAAcnD,EAC5CE,SAAUkD,IAAenD,GAAOoD,IAAerD,IAuD7CyD,EAAmB,SAACtC,EAAMlB,EAAKD,GACnC,IAAKsD,EACH,OAzCqB,SAACnC,EAAMlB,EAAKD,GACnC,IAEI0D,EAFEC,EAAUxC,EAAKyC,QACfxC,EAAOuC,EAAQ1D,GAAKD,GAe1B,OAbIC,IAAQmD,GAAcpD,IAAQqD,IAChCK,EAAO,eACFtC,EADE,CAELhB,QAAQ,EACRD,SAAUiB,EAAKjB,QACfD,UAAU,IAEZyD,EAAQ1D,GAAKD,GAAO0D,EACpBJ,GAAY,EACZJ,EAAYjD,EACZkD,EAAYnD,GAGP2D,EAwBEE,CAAiB1C,EAAMlB,EAAKD,GAErC,IAAKuD,EACH,OAxBsB,SAACpC,EAAMlB,EAAKD,GACpC,IAEI0D,EAFEC,EAAUxC,EAAKyC,QACfxC,EAAOuC,EAAQ1D,GAAKD,GAc1B,OAZIC,IAAQiD,GAAalD,IAAQmD,IAC/BO,EAAO,eACFtC,EADE,CAELhB,QAAQ,EACRF,UAAU,EACVC,SAAS,IAEXwD,EAAQ1D,GAAKD,GAAO0D,EACpBH,GAAa,EACbH,EAAanD,EACboD,EAAarD,GAER2D,EAQEG,CAAkB3C,EAAMlB,EAAKD,GAEtC,IAEI0D,EAFEC,EAAUxC,EAAKyC,QACfxC,EAAOuC,EAAQ1D,GAAKD,GA0B1B,OAxBKoB,EAAKjB,SAAYiB,EAAKlB,UAOrBkB,EAAKjB,UACPuD,EAAO,eACFtC,EADE,CAELjB,SAAUiB,EAAKjB,UAEjBmD,GAAY,EACZK,EAAQ1D,GAAKD,GAAO0D,GAElBtC,EAAKlB,WACPwD,EAAO,eACFtC,EADE,CAELlB,UAAWkB,EAAKlB,WAElBqD,GAAa,EACbI,EAAQ1D,GAAKD,GAAO0D,KApBtBA,EAAO,eACFtC,EADE,CAELhB,QAASgB,EAAKhB,SAEhBuD,EAAQ1D,GAAKD,GAAO0D,GAmBfC,GAGYI,E,YACnB,WAAYhE,GAAQ,IAAD,8BACjB,4CAAMA,KACDiE,MAAQ,CACXvB,MAAO,GACPwB,UAAW,aACX9C,KAAM,GACN+C,WAAW,EACXC,MAAM,EACNC,UAAW,IARI,E,oFAajB,GAAKd,GAAcC,EAMjB,OAAQc,KAAKL,MAAMC,WACjB,IAAK,WACHI,KAAKC,oBACL,MACF,IAAK,MACHD,KAAKE,eACL,MACF,IAAK,MACHF,KAAKG,eACL,MACF,QACEH,KAAKI,SAAS,CAAEL,UAAW,sBAAuBD,MAAM,SAhB5DE,KAAKI,SAAS,CACZL,UAAW,6DACXD,MAAM,M,sCAmBIlE,EAAKD,GACnB,IAAM2D,EAAUF,EAAiBY,KAAKL,MAAM7C,KAAMlB,EAAKD,GACvDqE,KAAKI,SAAS,CAAEtD,KAAMwC,EAASO,WAAW,M,uCAG3BjE,EAAKD,GACpB,GAAIqE,KAAKL,MAAME,UAAW,CACxB,IAAMP,EAAUF,EAAiBY,KAAKL,MAAM7C,KAAMlB,EAAKD,GACvDqE,KAAKI,SAAS,CAAEtD,KAAMwC,O,sCAKxBU,KAAKI,SAAS,CAAEP,WAAW,M,0CAI3B,IAAM/C,EA7IU,WAElB,IADA,IAAMA,EAAO,GACJlB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMyE,EAAa,GACV1E,EAAM,EAAGA,EAAM+C,KAAK4B,OAAOC,OAAOC,MAAQ,IAAM,IAAK7E,IAC5D0E,EAAWhD,KAAK8B,EAAWxD,EAAKC,IAElCkB,EAAKO,KAAKgD,GAEZ,OAAOvD,EAoIQ2D,GACbT,KAAKI,SAAS,CAAEtD,W,4CAGI8C,GACpBI,KAAKI,SAAS,CAAER,UAAWA,M,6CAM3B,IAHsB,IACd9C,EAASkD,KAAKL,MAAd7C,KACFwC,EAAU,GACPoB,EAAI,EAAGA,EAAI5D,EAAKQ,OAAQoD,IAAK,CAEpC,IADA,IAAML,EAAa,GACVM,EAAI,EAAGA,EAAI7D,EAAK4D,GAAGpD,OAAQqD,IAAK,CACvC,IAAM5D,EAAOD,EAAK4D,GAAGC,GACrB5D,EAAKC,WAAY,EACjB,IAAI4D,OAAY,EACZ7D,EAAKjB,UACP8E,EAAe,cAEb7D,EAAKlB,WACP+E,EAAe,eAEb7D,EAAKhB,SACP6E,EAAe,aAEjBP,EAAWhD,KAAKN,GAChB8D,SAASC,eAAT,UAA2BJ,EAA3B,YAAgCC,IAAKvE,UAArC,eAAyDwE,GAE3DtB,EAAQjC,KAAKgD,GAEfL,KAAKI,SAAS,CAAEtD,KAAMwC,M,8CAMtB,IAHuB,IACfxC,EAASkD,KAAKL,MAAd7C,KACFwC,EAAU,GACPoB,EAAI,EAAGA,EAAI5D,EAAKQ,OAAQoD,IAAK,CAEpC,IADA,IAAML,EAAa,GACVM,EAAI,EAAGA,EAAI7D,EAAK4D,GAAGpD,OAAQqD,IAAK,CACvC,IAAIC,OAAY,EACV7D,EAAOD,EAAK4D,GAAGC,GACrB5D,EAAKhB,QAAS,EACdgB,EAAKC,WAAY,EACbD,EAAKjB,UACP8E,EAAe,cAEb7D,EAAKlB,WACP+E,EAAe,eAEjBP,EAAWhD,KAAKN,GAChB8D,SAASC,eAAT,UAA2BJ,EAA3B,YAAgCC,IAAKvE,UAArC,eAAyDwE,GAE3DtB,EAAQjC,KAAKgD,GAEfL,KAAKI,SAAS,CAAEtD,KAAMwC,M,0CAGJ9C,GAClB,IADiC,IAAD,WACvBkE,GACPK,YAAW,WACT,IAAMhE,EAAOP,EAAakE,GAC1BG,SAASC,eAAT,UAA2B/D,EAAKnB,IAAhC,YAAuCmB,EAAKpB,MAAOS,UAAY,4BAC9D,GAAKsE,IAJDA,EAAI,EAAGA,EAAIlE,EAAac,OAAQoD,IAAM,EAAtCA,K,8BAQHvC,EAAc3B,GACpB,IADmC,IAAD,kBACzBkE,GACP,GAAIA,IAAMvC,EAAab,OAIrB,OAHAyD,YAAW,WACT,EAAKC,oBAAoBxE,KACxB,GAAKkE,GACF,CAAN,UAEFK,YAAW,WACT,IAAMhE,EAAOoB,EAAauC,GAC1BG,SAASC,eAAT,UAA2B/D,EAAKnB,IAAhC,YAAuCmB,EAAKpB,MAAOS,UAAY,sBAC9D,GAAKsE,IAVDA,EAAI,EAAGA,GAAKvC,EAAab,OAAQoD,IAAK,CAAC,IAAD,IAAtCA,GAAsC,qC,qCAcjC,IACN5D,EAASkD,KAAKL,MAAd7C,KACFoB,EAAYpB,EAAK+B,GAAWC,GAC5BvC,EAAaO,EAAKiC,GAAYC,GAC9Bb,ECnQH,SAAarB,EAAMoB,GACxBrB,EAAQC,GACR,IAAMqB,EAAe,GACrBD,EAAUjB,SAAW,EAIrB,IAHA,IACIR,EADAwE,EAAQ,CAAC/C,GAGW,IAAjB+C,EAAM3D,QAEX,KADAb,EAAcwE,EAAM1C,SACJxC,OAAhB,CAEA,GADAoC,EAAad,KAAKZ,GACdA,EAAYZ,SAAU,MAC1BY,EAAYO,WAAY,EAExB,IADA,IAAIkE,EAAmB/D,EAAaV,EAAaK,GACxC4D,EAAI,EAAGA,EAAIQ,EAAiB5D,OAAQoD,IACvCQ,EAAiBR,GAAGzD,WAAaC,MACnCgE,EAAiBR,GAAGzD,SAAWR,EAAYQ,SAAW,EACtDiE,EAAiBR,GAAG9D,aAAeH,EACnCwE,EAAM5D,KAAK6D,EAAiBR,KAIlC,OAAOvC,ED6OgBgD,CAAIrE,EAAMoB,GACzB1B,EAAeF,EAAgBC,GACrCyD,KAAKoB,QAAQjD,EAAc3B,K,qCAGb,IACNM,EAASkD,KAAKL,MAAd7C,KACFoB,EAAYpB,EAAK+B,GAAWC,GAC5BvC,EAAaO,EAAKiC,GAAYC,GAC9Bb,EE5QH,SAAarB,EAAMoB,GACxBrB,EAAQC,GACR,IAAMqB,EAAe,GACrBD,EAAUjB,SAAW,EAGrB,IAFA,IAAIoE,EAAQ,CAACnD,GAEW,IAAjBmD,EAAM/D,QAAc,CACzB,IAAIb,EAAc4E,EAAMC,MACxB,IAAI7E,EAAYV,SACc,IAA1BU,EAAYO,UAAqB,CAGnC,GAFAmB,EAAad,KAAKZ,GAClBA,EAAYO,WAAY,EACpBP,EAAYZ,SAAU,MAE1B,IADA,IAAIqF,EAAmB/D,EAAaV,EAAaK,GACxC4D,EAAI,EAAGA,EAAIQ,EAAiB5D,OAAQoD,IAC3CQ,EAAiBR,GAAGzD,SAAWR,EAAYQ,SAAW,EACtDoE,EAAMhE,KAAK6D,EAAiBR,KAIlC,OAAOvC,EFwPgBoD,CAAIzE,EAAMoB,GAC/BD,EAASnB,EAAMoB,EAAW3B,GAC1B,IAAMC,EAAeF,EAAgBC,GACrCyD,KAAKoB,QAAQjD,EAAc3B,K,0CAGR,IACXM,EAASkD,KAAKL,MAAd7C,KACFoB,EAAYpB,EAAK+B,GAAWC,GAC5BvC,EAAaO,EAAKiC,GAAYC,GAC9Bb,EAAeF,EAASnB,EAAMoB,EAAW3B,GACzCC,EAAeF,EAAgBC,GACrCyD,KAAKoB,QAAQjD,EAAc3B,K,qCAGb,IACNM,EAASkD,KAAKL,MAAd7C,KACJlB,EAAMiD,EACNlD,EAAMmD,EACNnD,EAAMmB,EAAK,GAAGQ,OAAS,EACrB3B,EAAM,IAAM,IACdA,GAAO,GAGLA,EAAM,IAAM,IACdA,GAAO,GAGPC,EAAMkB,EAAKQ,OAAS,EAClB1B,EAAM,IAAM,IACdA,GAAO,GAGLA,EAAM,IAAM,IACdA,GAAO,GAGX,IACM0D,EDlTH,SAAuBxC,EAAMC,GAClCF,EAAQC,GAiCV,SAAkBA,GAChB,IAAK,IAAI4D,EAAI,EAAGA,EAAI5D,EAAKQ,OAAQoD,GAAK,EACpC,IAAK,IAAIC,EAAI,EAAGA,EAAI7D,EAAK,GAAGQ,OAAQqD,IAC9B7D,EAAK4D,GAAGC,KACL7D,EAAK4D,GAAGC,GAAG7E,SAAYgB,EAAK4D,GAAGC,GAAGa,WACrC1E,EAAK4D,GAAGC,GAAG5E,QAAS,IAK5B,IAAK,IAAI2E,EAAI,EAAGA,EAAI5D,EAAK,GAAGQ,OAAQoD,GAAK,EACvC,IAAK,IAAIC,EAAI,EAAGA,EAAI7D,EAAKQ,OAAQqD,IAC3B7D,EAAK6D,GAAGD,KACL5D,EAAK6D,GAAGD,GAAG5E,SAAYgB,EAAK6D,GAAGD,GAAGc,WACrC1E,EAAK6D,GAAGD,GAAG3E,QAAS,IA9C5B0F,CAAS3E,GACTC,EAAKC,WAAY,EAEjB,IADA,IAAMqE,EAAQ,CAACtE,GACS,IAAjBsE,EAAM/D,QAAc,CACzB,IAAMb,EAAc4E,EAAMC,MACpBlE,EAAYqB,EAAmC3B,EAAML,GAC3DA,EAAYO,WAAY,EACC,IAArBI,EAAUE,SACZ+D,EAAMhE,KAAKZ,GACX+B,EAAW1B,EAAML,EAAaW,EAAU,IACxCA,EAAUJ,WAAY,EACtBqE,EAAMhE,KAAKD,EAAU,KAGzB,OAAON,ECkSW4E,CAAc5E,EADZA,EAAKlB,GAAKD,IAE5BqE,KAAKI,SAAS,CAAEtD,KAAMwC,M,+BAGd,IAAD,OACCxC,EAASkD,KAAKL,MAAd7C,KACR,OACE,oCACE,kBAAC6E,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,6BACE,kBAACF,EAAA,EAAOG,MAAR,KACE,0BAAM1F,UAAU,QACd,kBAAC,IAAD,CAAiB2F,KAAMC,IAAgB5F,UAAU,SADnD,gBAOJ,kBAAC6F,EAAA,EAAD,CACEJ,QAAQ,gBACRzF,UAAU,aACV8F,QAAS,kBAAM,EAAKC,0BAHtB,eAOA,kBAACF,EAAA,EAAD,CACEJ,QAAQ,gBACRzF,UAAU,aACV8F,QAAS,kBAAM,EAAKE,yBAHtB,cAOA,kBAACC,EAAA,EAAD,CACEjG,UAAU,eACVkG,MAAO,0BAAMlG,UAAU,YAAY4D,KAAKL,MAAMC,YAE9C,kBAACyC,EAAA,EAAYE,KAAb,CAAkBL,QAAS,kBAAM,EAAKM,sBAAsB,cAA5D,YAGA,kBAACH,EAAA,EAAYE,KAAb,CAAkBL,QAAS,kBAAM,EAAKM,sBAAsB,SAA5D,OAGA,kBAACH,EAAA,EAAYE,KAAb,CAAkBL,QAAS,kBAAM,EAAKM,sBAAsB,SAA5D,QAIF,kBAACP,EAAA,EAAD,CACEJ,QAAQ,QACRzF,UAAU,aACV8F,QAAS,kBAAM,EAAKO,yBAHtB,cAOA,kBAACR,EAAA,EAAD,CAAQJ,QAAQ,QAAQK,QAAS,kBAAM,EAAKQ,iBAA5C,kBAIF,yBAAKtG,UAAU,eACZU,EAAK6F,KAAI,SAAC/G,EAAKgH,GACd,OACE,yBAAKC,IAAKD,EAAUxG,UAAU,cAC3BR,EAAI+G,KAAI,SAAC5F,EAAM+F,GAAe,IACrBlH,EAAwCmB,EAAxCnB,IAAKD,EAAmCoB,EAAnCpB,IAAKE,EAA8BkB,EAA9BlB,SAAUC,EAAoBiB,EAApBjB,QAASC,EAAWgB,EAAXhB,OACrC,OACE,kBAACN,EAAD,CACEoE,UAAW,EAAKF,MAAME,UACtB7D,YAAa,SAACJ,EAAKD,GAAN,OAAc,EAAKoH,gBAAgBnH,EAAKD,IACrDM,aAAc,SAACL,EAAKD,GAAN,OAAc,EAAKqH,iBAAiBpH,EAAKD,IACvDO,UAAW,kBAAM,EAAK+G,iBACtBJ,IAAKC,EACLnH,IAAKA,EACLC,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,WAOpB,kBAACmH,EAAA,EAAD,CACEpD,KAAME,KAAKL,MAAMG,KACjB+B,QAAQ,SACRsB,QAAS,kBAAM,EAAK/C,SAAS,CAAEN,MAAM,KACrCsD,aAAW,GAEVpD,KAAKL,MAAMI,iB,GAjR2BsD,a,MG7GpCC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCHNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASC,eAAe,W","file":"static/js/main.d85370d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Node(props) {\r\n  const { col, row, isFinish, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp } = props;\r\n  const colorClassName = isFinish\r\n    ? 'node-finish'\r\n    : isStart\r\n    ? 'node-start'\r\n    : isWall\r\n    ? 'node-wall'\r\n    : '';\r\n  return (\r\n    <div\r\n      className={`node ${colorClassName}`}\r\n      id={`${row},${col}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()}\r\n    >\r\n      {' '}\r\n    </div>\r\n  );\r\n}\r\n","export function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== undefined) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath;\r\n}\r\n\r\nexport function setNode(grid) {\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.isVisited = false;\r\n      node.distance = Infinity;\r\n      node.previousNode = undefined;\r\n      node.isVisited = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n","import { setNode } from './utils';\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // skip walls\r\n    if (closestNode.isWall) continue;\r\n    // stop if start node is trapped (closestNode.distance === Infinity)\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodes;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","import { setNode, getNeighbors } from './utils';\r\n\r\nexport function mazeGenerator(grid, node) {\r\n  setNode(grid);\r\n  setWalls(grid);\r\n  node.isVisited = true;\r\n  const stack = [node];\r\n  while (stack.length !== 0) {\r\n    const currentNode = stack.pop();\r\n    const neighbors = getUnvisitedNeighborsInRandomOrder(grid, currentNode);\r\n    currentNode.isVisited = true;\r\n    if (neighbors.length !== 0) {\r\n      stack.push(currentNode);\r\n      removeWall(grid, currentNode, neighbors[0]);\r\n      neighbors.isVisited = true;\r\n      stack.push(neighbors[0]);\r\n    }\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction removeWall(grid, node, neighbor) {\r\n  if (node.col === neighbor.col && node.row > neighbor.row) {\r\n    grid[node.row - 1][node.col].isWall = false;\r\n  }\r\n  if (node.col > neighbor.col && node.row === neighbor.row) {\r\n    grid[node.row][node.col - 1].isWall = false;\r\n  }\r\n  if (node.col === neighbor.col && node.row < neighbor.row) {\r\n    grid[node.row + 1][node.col].isWall = false;\r\n  }\r\n  if (node.col < neighbor.col && node.row && neighbor.row) {\r\n    grid[node.row][node.col + 1].isWall = false;\r\n  }\r\n}\r\n\r\nfunction setWalls(grid) {\r\n  for (let i = 0; i < grid.length; i += 2) {\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      if (grid[i][j]) {\r\n        if (!grid[i][j].isStart && !grid[i][j].isFisish) {\r\n          grid[i][j].isWall = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let i = 0; i < grid[0].length; i += 2) {\r\n    for (let j = 0; j < grid.length; j++) {\r\n      if (grid[j][i]) {\r\n        if (!grid[j][i].isStart && !grid[j][i].isFisish) {\r\n          grid[j][i].isWall = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighborsInRandomOrder(grid, node) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 1) {\r\n    neighbors.push(grid[row - 2][col]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    neighbors.push(grid[row + 2][col]);\r\n  }\r\n  if (col > 1) {\r\n    neighbors.push(grid[row][col - 2]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    neighbors.push(grid[row][col + 2]);\r\n  }\r\n  neighbors.sort(() => Math.random() - 0.5);\r\n  return neighbors.filter(item => !item.isVisited);\r\n}\r\n","/* eslint-disable */\r\nimport React, { Component } from 'react';\r\nimport Node from '../Node';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { dijkstra } from '../../algorithms/dijkstra';\r\nimport { BFS } from '../../algorithms/breadthFirst';\r\nimport { DFS } from '../../algorithms/depthFirst';\r\nimport { getShortestPath } from '../../algorithms/utils';\r\nimport { mazeGenerator } from '../../algorithms/mazeGenerator';\r\n\r\nimport './styles.css';\r\n\r\nlet START_ROW = 3;\r\nlet START_COL = 3;\r\nlet FINISH_ROW = 21;\r\nlet FINISH_COL = 3;\r\n\r\nlet HAS_START = true;\r\nlet HAS_FINISH = true;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: START_ROW === row && START_COL === col,\r\n    isFinish: FINISH_ROW === row && FINISH_COL === col\r\n  };\r\n};\r\n\r\nconst InitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 31; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < Math.floor((screen.width - 25) / 26); col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getGridWithStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== FINISH_ROW || col !== FINISH_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isStart: !node.isStart,\r\n      isFinish: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_START = true;\r\n    START_ROW = row;\r\n    START_COL = col;\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== START_ROW || col !== START_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isFinish: true,\r\n      isStart: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_FINISH = true;\r\n    FINISH_ROW = row;\r\n    FINISH_COL = col;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithWalls = (grid, row, col) => {\r\n  if (!HAS_START) {\r\n    return getGridWithStart(grid, row, col);\r\n  }\r\n  if (!HAS_FINISH) {\r\n    return getGridWithFinish(grid, row, col);\r\n  }\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (!node.isStart && !node.isFinish) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  } else {\r\n    if (node.isStart) {\r\n      newNode = {\r\n        ...node,\r\n        isStart: !node.isStart\r\n      };\r\n      HAS_START = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n    if (node.isFinish) {\r\n      newNode = {\r\n        ...node,\r\n        isFinish: !node.isFinish\r\n      };\r\n      HAS_FINISH = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n      algorithm: 'algorithms',\r\n      grid: [],\r\n      isPressed: false,\r\n      show: false,\r\n      alertText: ''\r\n    };\r\n  }\r\n\r\n  handleClickVisualize() {\r\n    if (!HAS_START || !HAS_FINISH) {\r\n      this.setState({\r\n        alertText: 'Place finish and start on board to visualize the algorithm',\r\n        show: true\r\n      });\r\n    } else {\r\n      switch (this.state.algorithm) {\r\n        case 'Dijkstra':\r\n          this.visualizeDijkstra();\r\n          break;\r\n        case 'BFS':\r\n          this.visualizeBFS();\r\n          break;\r\n        case 'DFS':\r\n          this.visualizeDFS();\r\n          break;\r\n        default:\r\n          this.setState({ alertText: 'Choose an algorithm', show: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, isPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.isPressed) {\r\n      const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ isPressed: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = InitialGrid(10, 10, 10, 30);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleChangeAlgorithm(algorithm) {\r\n    this.setState({ algorithm: algorithm });\r\n  }\r\n\r\n  handleClickClearPath() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        const node = grid[i][j];\r\n        node.isVisited = false;\r\n        let extraClasses;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        if (node.isWall) {\r\n          extraClasses = 'node-wall';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleClickClearBoard() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        let extraClasses;\r\n        const node = grid[i][j];\r\n        node.isWall = false;\r\n        node.isVisited = false;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-shortest-path';\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodes, shortestPath) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  visualizeBFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = BFS(grid, startNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = DFS(grid, startNode);\r\n    dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  generateMaze() {\r\n    const { grid } = this.state;\r\n    let row = START_ROW;\r\n    let col = START_COL;\r\n    if (col < grid[0].length - 1) {\r\n      if (col % 2 === 0) {\r\n        col += 1;\r\n      }\r\n    } else {\r\n      if (col % 2 === 0) {\r\n        col -= 1;\r\n      }\r\n    }\r\n    if (row < grid.length - 1) {\r\n      if (row % 2 === 0) {\r\n        row += 1;\r\n      }\r\n    } else {\r\n      if (row % 2 === 0) {\r\n        row -= 1;\r\n      }\r\n    }\r\n    const startNode = grid[row][col];\r\n    const newGrid = mazeGenerator(grid, startNode);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <div>\r\n            <Navbar.Brand>\r\n              <span className=\"logo\">\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} className=\"icon\" />\r\n                Pathfinder\r\n              </span>\r\n            </Navbar.Brand>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearBoard()}\r\n          >\r\n            Clear Board\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearPath()}\r\n          >\r\n            Clear Path\r\n          </Button>\r\n          <NavDropdown\r\n            className=\"dropdownFont\"\r\n            title={<span className=\"navColor\">{this.state.algorithm}</span>}\r\n          >\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('Dijkstra')}>\r\n              Dijkstra\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('BFS')}>\r\n              BFS\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('DFS')}>\r\n              DFS\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Button\r\n            variant=\"light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickVisualize()}\r\n          >\r\n            Visualize!\r\n          </Button>\r\n          <Button variant=\"light\" onClick={() => this.generateMaze()}>\r\n            Generate Maze\r\n          </Button>\r\n        </Navbar>\r\n        <div className=\"spacingGrid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex} className=\"spacingRow\">\r\n                {row.map((node, nodeIndex) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      isPressed={this.state.isPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      key={nodeIndex}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n          <Alert\r\n            show={this.state.show}\r\n            variant=\"danger\"\r\n            onClose={() => this.setState({ show: false })}\r\n            dismissible\r\n          >\r\n            {this.state.alertText}\r\n          </Alert>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { setNode, getNeighbors } from './utils';\r\n\r\nexport function BFS(grid, startNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  let queue = [startNode];\r\n  let currentNode;\r\n\r\n  while (queue.length !== 0) {\r\n    currentNode = queue.shift();\r\n    if (currentNode.isWall) continue;\r\n    visitedNodes.push(currentNode);\r\n    if (currentNode.isFinish) break;\r\n    currentNode.isVisited = true;\r\n    let currentConnected = getNeighbors(currentNode, grid);\r\n    for (let i = 0; i < currentConnected.length; i++) {\r\n      if (currentConnected[i].distance === Infinity) {\r\n        currentConnected[i].distance = currentNode.distance + 1;\r\n        currentConnected[i].previousNode = currentNode;\r\n        queue.push(currentConnected[i]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodes;\r\n}\r\n","import { setNode, getNeighbors } from './utils';\r\n\r\nexport function DFS(grid, startNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  let stack = [startNode];\r\n\r\n  while (stack.length !== 0) {\r\n    let currentNode = stack.pop();\r\n    if (currentNode.isWall) continue;\r\n    if (currentNode.isVisited === false) {\r\n      visitedNodes.push(currentNode);\r\n      currentNode.isVisited = true;\r\n      if (currentNode.isFinish) break;\r\n      let currentConnected = getNeighbors(currentNode, grid);\r\n      for (let i = 0; i < currentConnected.length; i++) {\r\n        currentConnected[i].distance = currentNode.distance + 1;\r\n        stack.push(currentConnected[i]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodes;\r\n}\r\n","/* eslint-disable */\nimport React from 'react';\nimport Pathfinder from './Components/PathfindingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}