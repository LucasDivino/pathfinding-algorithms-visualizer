{"version":3,"sources":["Components/Node/index.js","algorithms/dijkstra.js","Components/PathfindingVisualizer/index.js","App.js","index.js"],"names":["Node","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","colorClassName","className","id","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","distance","previousNode","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","dijkstra","startNode","finishNode","Infinity","setDistanceInfinity","visitedNodes","nodes","getAllNodes","closestNode","shift","START_ROW","START_COL","FINISH_ROW","FINISH_COL","HAS_START","HAS_FINISH","createNode","getGridWithWalls","newNode","newGrid","slice","getGridWithStart","getGridWithFinish","PathfindingVisualizer","state","algorithm","isPressed","show","alertText","this","visualizeDijkstra","setState","currentRow","Math","floor","screen","width","InitialGrid","i","j","extraClasses","document","getElementById","shortestPath","setTimeout","animateShortestPath","currentNode","undefined","unshift","getShortestPath","animateDijkstra","Navbar","bg","variant","Brand","icon","faMapMarkerAlt","Button","onClick","handleClickClearBoard","handleClickClearPath","NavDropdown","title","Item","handleChangeAlgorithm","handleClickVisualize","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","Alert","onClose","dismissible","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.da9d62c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Node(props) {\r\n  const { col, row, isFinish, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp } = props;\r\n  const colorClassName = isFinish\r\n    ? 'node-finish'\r\n    : isStart\r\n    ? 'node-start'\r\n    : isWall\r\n    ? 'node-wall'\r\n    : '';\r\n  return (\r\n    <div\r\n      className={`node ${colorClassName}`}\r\n      id={`${row},${col}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()}\r\n    >\r\n      {' '}\r\n    </div>\r\n  );\r\n}\r\n","function setDistanceInfinity(grid) {\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.distance = Infinity;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  setDistanceInfinity(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // skip walls\r\n    if (closestNode.isWall) continue;\r\n    // stop if start node is trapped (closestNode.distance === Infinity)\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodes;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== undefined) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath;\r\n}\r\n","/* eslint-disable */\r\nimport React, { Component } from 'react';\r\nimport Node from '../Node';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { dijkstra, getShortestPath } from '../../algorithms/dijkstra';\r\n\r\nimport './styles.css';\r\n\r\nlet START_ROW = 0;\r\nlet START_COL = 0;\r\nlet FINISH_ROW = 24;\r\nlet FINISH_COL = 0;\r\n\r\nlet HAS_START = true;\r\nlet HAS_FINISH = true;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: START_ROW === row && START_COL === col,\r\n    isFinish: FINISH_ROW === row && FINISH_COL === col\r\n  };\r\n};\r\n\r\nconst InitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 25; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < Math.floor((screen.width - 25) / 26); col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getGridWithStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== FINISH_ROW || col !== FINISH_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isStart: !node.isStart,\r\n      isFinish: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_START = true;\r\n    START_ROW = row;\r\n    START_COL = col;\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== START_ROW || col !== START_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isFinish: true,\r\n      isStart: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_FINISH = true;\r\n    FINISH_ROW = row;\r\n    FINISH_COL = col;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithWalls = (grid, row, col) => {\r\n  if (!HAS_START) {\r\n    return getGridWithStart(grid, row, col);\r\n  }\r\n  if (!HAS_FINISH) {\r\n    return getGridWithFinish(grid, row, col);\r\n  }\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (!node.isStart && !node.isFinish) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  } else {\r\n    if (node.isStart) {\r\n      newNode = {\r\n        ...node,\r\n        isStart: !node.isStart\r\n      };\r\n      HAS_START = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n    if (node.isFinish) {\r\n      newNode = {\r\n        ...node,\r\n        isFinish: !node.isFinish\r\n      };\r\n      HAS_FINISH = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n      algorithm: 'algorithms',\r\n      grid: [],\r\n      isPressed: false,\r\n      show: false,\r\n      alertText: ''\r\n    };\r\n  }\r\n\r\n  handleClickVisualize() {\r\n    if (!HAS_START || !HAS_FINISH) {\r\n      this.setState({\r\n        alertText: 'Place finish and start on board to visualize the algorithm',\r\n        show: true\r\n      });\r\n    } else {\r\n      switch (this.state.algorithm) {\r\n        case 'Dijkstra':\r\n          this.visualizeDijkstra();\r\n          break;\r\n        default:\r\n          this.setState({ alertText: 'Choose an algorithm', show: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, isPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.isPressed) {\r\n      const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ isPressed: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = InitialGrid(10, 10, 10, 30);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleChangeAlgorithm(algorithm) {\r\n    this.setState({ algorithm: algorithm });\r\n  }\r\n\r\n  handleClickClearPath() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        const node = grid[i][j];\r\n        node.isVisited = false;\r\n        let extraClasses;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        if (node.isWall) {\r\n          extraClasses = 'node-wall';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleClickClearBoard() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        let extraClasses;\r\n        const node = grid[i][j];\r\n        node.isWall = false;\r\n        node.isVisited = false;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-shortest-path';\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  animateDijkstra(visitedNodes, shortestPath) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animateDijkstra(visitedNodes, shortestPath);\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <div>\r\n            <Navbar.Brand>\r\n              <span className=\"logo\">\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} className=\"icon\" />\r\n                Pathfinder\r\n              </span>\r\n            </Navbar.Brand>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearBoard()}\r\n          >\r\n            Clear Board\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearPath()}\r\n          >\r\n            Clear Path\r\n          </Button>\r\n          <NavDropdown\r\n            className=\"dropdownFont\"\r\n            title={<span className=\"navColor\">{this.state.algorithm}</span>}\r\n          >\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('Dijkstra')}>\r\n              Dijkstra\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Button variant=\"light\" onClick={() => this.handleClickVisualize()}>\r\n            Vizualize!\r\n          </Button>\r\n        </Navbar>\r\n        <div className=\"spacingGrid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex} className=\"spacingRow\">\r\n                {row.map((node, nodeIndex) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      isPressed={this.state.isPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      key={nodeIndex}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n          <Alert\r\n            show={this.state.show}\r\n            variant=\"danger\"\r\n            onClose={() => this.setState({ show: false })}\r\n            dismissible\r\n          >\r\n            {this.state.alertText}\r\n          </Alert>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable */\nimport React from 'react';\nimport Pathfinder from './Components/PathfindingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}