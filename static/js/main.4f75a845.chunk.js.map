{"version":3,"sources":["Components/Node/index.js","algorithms/utils.js","algorithms/dijkstra.js","algorithms/breadthFirst.js","algorithms/depthFirst.js","Components/PathfindingVisualizer/index.js","App.js","index.js"],"names":["Node","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","colorClassName","className","id","getShortestPath","finishNode","shortestPath","currentNode","undefined","unshift","previousNode","setNode","grid","node","distance","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","push","length","filter","neighbor","getUnvisitedNeighbors","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","dijkstra","startNode","visitedNodes","nodes","getAllNodes","closestNode","shift","getNeighbors","START_ROW","START_COL","FINISH_ROW","FINISH_COL","HAS_START","HAS_FINISH","createNode","getGridWithWalls","newNode","newGrid","slice","getGridWithStart","getGridWithFinish","PathfindingVisualizer","state","algorithm","isPressed","show","alertText","this","visualizeDijkstra","visualizeBFS","visualizeDFS","setState","currentRow","Math","floor","screen","width","InitialGrid","i","j","extraClasses","document","getElementById","setTimeout","animateShortestPath","queue","currentConnected","BFS","animate","stack","pop","DFS","Navbar","bg","variant","Brand","icon","faMapMarkerAlt","Button","onClick","handleClickClearBoard","handleClickClearPath","NavDropdown","title","Item","handleChangeAlgorithm","handleClickVisualize","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","Alert","onClose","dismissible","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.4f75a845.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Node(props) {\r\n  const { col, row, isFinish, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp } = props;\r\n  const colorClassName = isFinish\r\n    ? 'node-finish'\r\n    : isStart\r\n    ? 'node-start'\r\n    : isWall\r\n    ? 'node-wall'\r\n    : '';\r\n  return (\r\n    <div\r\n      className={`node ${colorClassName}`}\r\n      id={`${row},${col}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()}\r\n    >\r\n      {' '}\r\n    </div>\r\n  );\r\n}\r\n","export function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== undefined) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath;\r\n}\r\n\r\nexport function setNode(grid) {\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.distance = Infinity;\r\n      node.previousNode = undefined;\r\n      node.isVisited = false;\r\n    }\r\n  }\r\n}\r\n","import { setNode } from './utils';\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // skip walls\r\n    if (closestNode.isWall) continue;\r\n    // stop if start node is trapped (closestNode.distance === Infinity)\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodes;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","import { setNode } from './utils';\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n\r\nexport function BFS(grid, startNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  let queue = [startNode];\r\n  let currentNode;\r\n\r\n  while (queue.length !== 0) {\r\n    currentNode = queue.shift();\r\n    if (currentNode.isWall) continue;\r\n    visitedNodes.push(currentNode);\r\n    if (currentNode.isFinish) break;\r\n    currentNode.isVisited = true;\r\n    let currentConnected = getNeighbors(currentNode, grid);\r\n    for (let i = 0; i < currentConnected.length; i++) {\r\n      if (currentConnected[i].distance === Infinity) {\r\n        currentConnected[i].distance = currentNode.distance + 1;\r\n        currentConnected[i].previousNode = currentNode;\r\n        queue.push(currentConnected[i]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodes;\r\n}\r\n","import { setNode } from './utils';\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n\r\nexport function DFS(grid, startNode) {\r\n  setNode(grid);\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  let stack = [startNode];\r\n\r\n  while (stack.length !== 0) {\r\n    let currentNode = stack.pop();\r\n    if (currentNode.isWall) continue;\r\n    if (currentNode.isVisited === false) {\r\n      visitedNodes.push(currentNode);\r\n      currentNode.isVisited = true;\r\n      if (currentNode.isFinish) break;\r\n      let currentConnected = getNeighbors(currentNode, grid);\r\n      for (let i = 0; i < currentConnected.length; i++) {\r\n        currentConnected[i].distance = currentNode.distance + 1;\r\n        stack.push(currentConnected[i]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodes;\r\n}\r\n","/* eslint-disable */\r\nimport React, { Component } from 'react';\r\nimport Node from '../Node';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { dijkstra } from '../../algorithms/dijkstra';\r\nimport { BFS } from '../../algorithms/breadthFirst';\r\nimport { DFS } from '../../algorithms/depthFirst';\r\nimport { getShortestPath } from '../../algorithms/utils';\r\n\r\nimport './styles.css';\r\n\r\nlet START_ROW = 0;\r\nlet START_COL = 0;\r\nlet FINISH_ROW = 24;\r\nlet FINISH_COL = 0;\r\n\r\nlet HAS_START = true;\r\nlet HAS_FINISH = true;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: START_ROW === row && START_COL === col,\r\n    isFinish: FINISH_ROW === row && FINISH_COL === col\r\n  };\r\n};\r\n\r\nconst InitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 25; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < Math.floor((screen.width - 25) / 26); col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getGridWithStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== FINISH_ROW || col !== FINISH_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isStart: !node.isStart,\r\n      isFinish: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_START = true;\r\n    START_ROW = row;\r\n    START_COL = col;\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (row !== START_ROW || col !== START_COL) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      isFinish: true,\r\n      isStart: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    HAS_FINISH = true;\r\n    FINISH_ROW = row;\r\n    FINISH_COL = col;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithWalls = (grid, row, col) => {\r\n  if (!HAS_START) {\r\n    return getGridWithStart(grid, row, col);\r\n  }\r\n  if (!HAS_FINISH) {\r\n    return getGridWithFinish(grid, row, col);\r\n  }\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode;\r\n  if (!node.isStart && !node.isFinish) {\r\n    newNode = {\r\n      ...node,\r\n      isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  } else {\r\n    if (node.isStart) {\r\n      newNode = {\r\n        ...node,\r\n        isStart: !node.isStart\r\n      };\r\n      HAS_START = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n    if (node.isFinish) {\r\n      newNode = {\r\n        ...node,\r\n        isFinish: !node.isFinish\r\n      };\r\n      HAS_FINISH = false;\r\n      newGrid[row][col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n      algorithm: 'algorithms',\r\n      grid: [],\r\n      isPressed: false,\r\n      show: false,\r\n      alertText: ''\r\n    };\r\n  }\r\n\r\n  handleClickVisualize() {\r\n    if (!HAS_START || !HAS_FINISH) {\r\n      this.setState({\r\n        alertText: 'Place finish and start on board to visualize the algorithm',\r\n        show: true\r\n      });\r\n    } else {\r\n      switch (this.state.algorithm) {\r\n        case 'Dijkstra':\r\n          this.visualizeDijkstra();\r\n          break;\r\n        case 'BFS':\r\n          this.visualizeBFS();\r\n          break;\r\n        case 'DFS':\r\n          this.visualizeDFS();\r\n          break;\r\n        default:\r\n          this.setState({ alertText: 'Choose an algorithm', show: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, isPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.isPressed) {\r\n      const newGrid = getGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ isPressed: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = InitialGrid(10, 10, 10, 30);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleChangeAlgorithm(algorithm) {\r\n    this.setState({ algorithm: algorithm });\r\n  }\r\n\r\n  handleClickClearPath() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        const node = grid[i][j];\r\n        node.isVisited = false;\r\n        let extraClasses;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        if (node.isWall) {\r\n          extraClasses = 'node-wall';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleClickClearBoard() {\r\n    const { grid } = this.state;\r\n    const newGrid = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        let extraClasses;\r\n        const node = grid[i][j];\r\n        node.isWall = false;\r\n        node.isVisited = false;\r\n        if (node.isStart) {\r\n          extraClasses = 'node-start';\r\n        }\r\n        if (node.isFinish) {\r\n          extraClasses = 'node-finish';\r\n        }\r\n        currentRow.push(node);\r\n        document.getElementById(`${i},${j}`).className = `node ${extraClasses}`;\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-shortest-path';\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodes, shortestPath) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateDFS(visitedNodes, shortestPath) {\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(`${node.row},${node.col}`).className = 'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  visualizeBFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = BFS(grid, startNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = DFS(grid, startNode);\r\n    dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <div>\r\n            <Navbar.Brand>\r\n              <span className=\"logo\">\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} className=\"icon\" />\r\n                Pathfinder\r\n              </span>\r\n            </Navbar.Brand>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearBoard()}\r\n          >\r\n            Clear Board\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"rightSpace\"\r\n            onClick={() => this.handleClickClearPath()}\r\n          >\r\n            Clear Path\r\n          </Button>\r\n          <NavDropdown\r\n            className=\"dropdownFont\"\r\n            title={<span className=\"navColor\">{this.state.algorithm}</span>}\r\n          >\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('Dijkstra')}>\r\n              Dijkstra\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('BFS')}>\r\n              BFS\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onClick={() => this.handleChangeAlgorithm('DFS')}>\r\n              DFS\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Button variant=\"light\" onClick={() => this.handleClickVisualize()}>\r\n            Visualize!\r\n          </Button>\r\n        </Navbar>\r\n        <div className=\"spacingGrid\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex} className=\"spacingRow\">\r\n                {row.map((node, nodeIndex) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      isPressed={this.state.isPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      key={nodeIndex}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n          <Alert\r\n            show={this.state.show}\r\n            variant=\"danger\"\r\n            onClose={() => this.setState({ show: false })}\r\n            dismissible\r\n          >\r\n            {this.state.alertText}\r\n          </Alert>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable */\nimport React from 'react';\nimport Pathfinder from './Components/PathfindingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}